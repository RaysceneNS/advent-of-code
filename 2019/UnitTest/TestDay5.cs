using Library.Day5;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class TestDay5
{
    [TestMethod]
    public void TestPart1()
    {
        var computer = new Computer(null, null, 1002, 4, 3, 4, 33);

        computer.Execute();

        CollectionAssert.AreEqual(new int[] { 1002, 4, 3, 4, 99 }, computer.Program);
    }

    [TestMethod]
    public void TestPart2()
    {
        var computer = new Computer(
            () => { return (int)9991; },
            (x) => { System.Console.WriteLine(x); },
            3, 0, 4, 0, 99);

        computer.Run();

        CollectionAssert.AreEqual(new int[] { 9991, 0, 4, 0, 99 }, computer.Program);
    }

    [DataTestMethod]
    [DataRow(6069343, 1)]
    [DataRow(3188550, 5)]
    public void TestShipSubsystem(int expected, int input)
    {
        int output = -1;
        var computer = new Computer(
            () => { return (int)input; },
            (x) => { output = x; },
            3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 2, 218, 57, 224, 101, -3828, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1102, 26, 25, 224, 1001, 224, -650, 224, 4, 224, 1002, 223, 8, 223, 101, 7, 224, 224, 1, 223, 224, 223, 1102, 44, 37, 225, 1102, 51, 26, 225, 1102, 70, 94, 225, 1002, 188, 7, 224, 1001, 224, -70, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 1101, 86, 70, 225, 1101, 80, 25, 224, 101, -105, 224, 224, 4, 224, 102, 8, 223, 223, 101, 1, 224, 224, 1, 224, 223, 223, 101, 6, 91, 224, 1001, 224, -92, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1102, 61, 60, 225, 1001, 139, 81, 224, 101, -142, 224, 224, 4, 224, 102, 8, 223, 223, 101, 1, 224, 224, 1, 223, 224, 223, 102, 40, 65, 224, 1001, 224, -2800, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 3, 224, 1, 224, 223, 223, 1102, 72, 10, 225, 1101, 71, 21, 225, 1, 62, 192, 224, 1001, 224, -47, 224, 4, 224, 1002, 223, 8, 223, 101, 7, 224, 224, 1, 224, 223, 223, 1101, 76, 87, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 329, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 344, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 359, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 374, 101, 1, 223, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 389, 1001, 223, 1, 223, 107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 404, 101, 1, 223, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 419, 1001, 223, 1, 223, 1107, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 434, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 464, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 479, 101, 1, 223, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 494, 101, 1, 223, 223, 1008, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 509, 1001, 223, 1, 223, 1007, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 8, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 539, 101, 1, 223, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 554, 101, 1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 569, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 599, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 614, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 629, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 644, 1001, 223, 1, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 659, 1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226);

        computer.Run();

        Assert.AreEqual(expected, output);
    }

    [TestMethod]
    public void TestPartForEqualityToInput()
    {
        int output = -1;
        var computer = new Computer(
            () => { return (int)9991; },
            (x) => { output = x; },
            3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8);

        computer.Run();
        Assert.AreEqual(0, output);

        computer = new Computer(
            () => { return (int)8; },
            (x) => { output = x; },
            3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8);
        computer.Run();
        Assert.AreEqual(1, output);
    }


    [DataTestMethod]
    [DataRow(0, 0)]
    [DataRow(1, -789)]
    public void TestPartForJumpPos(int expected, int input)
    {
        int output = -1;
        var computer = new Computer(
            () => { return (int)input; },
            (x) => { output = x; },
            3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9);
        computer.Run();
        Assert.AreEqual(expected, output);
    }

    [DataTestMethod]
    [DataRow(0, 0)]
    [DataRow(1, -789)]
    public void TestPartForJumpImmediate(int expected, int input)
    {
        int output = -1;
        var computer = new Computer(
            () => { return (int)input; },
            (x) => { output = x; },
            3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1);
        computer.Run();
        Assert.AreEqual(expected, output);
    }

    [DataTestMethod]
    [DataRow(999, 5)]
    [DataRow(1000, 8)]
    [DataRow(1001, 1969)]
    public void TestIsInputLessThanEight(int expected, int input)
    {
        int output = -1;
        var computer = new Computer(
            () => { return (int)input; },
            (x) => { output = x; },
            3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99);
        computer.Run();
        Assert.AreEqual(expected, output);

    }
}
